#pragma comment(lib, "d3d9.lib")
#pragma comment(lib,"d3dx9.lib")

#include <stdint.h>
#include <iostream>
#include <memory>
#include <cstdlib>
#include <ctime>
#include <cassert>
#include <Windows.h>
#include <sstream>
#include <ostream>
#include <wininet.h>
#include <algorithm>
#include <functional>
#include <cstring>
#include <cctype>
#include <string>
#include <vector>
#include <istream>
#include <iterator>
#include <stdio.h>
#include <iostream>
#include <Psapi.h>
#include <intrin.h>
#include <iphlpapi.h>
#include <thread>
#include <iostream>
#include <string>
#include <thread>
#include <iomanip>
#include <time.h>
#include <WinUser.h>
#include <sstream>
#include <imgui.h>
#include <imgui_impl_dx9.h>
#include <imgui_impl_win32.h>
#include <d3d9.h>
#include <d3dx9.h>
#define snprintf _snprintf
#pragma warning(disable:4996)

//soo basically __stdcall is WINAPI (just use WINAPI more shorter)
#pragma region others stuff
typedef HRESULT(WINAPI* tEndScene)(LPDIRECT3DDEVICE9 pDevice);
tEndScene oEndScene;
D3DVIEWPORT9 viewport;
LPDIRECT3DDEVICE9 pDevice;

bool Setup;
bool ImguiOK;
bool MenuKeyShow;
DWORD* VTable;
DWORD PPPDevice;
#pragma endregion

MODULEINFO GetModuleInfo(HMODULE hModule)
{
	MODULEINFO mInfo = { 0 };
	GetModuleInformation(GetCurrentProcess(), hModule, &mInfo, sizeof(MODULEINFO));
	return mInfo;
}

uintptr_t FindPattern(uintptr_t lpBaseOfDll, uintptr_t SizeOfImage, const UCHAR* pattern, const CHAR* mask)
{
	uintptr_t Length = (uintptr_t)(strlen(mask));

	for (size_t i = 0; i < SizeOfImage - Length; i++)
	{
		INT Found = TRUE;
		for (size_t x = 0; x < Length; x++)
			Found &= mask[x] == '?' || pattern[x] == *(const UCHAR*)(lpBaseOfDll + i + x);
		if (Found)
			return (uintptr_t)(lpBaseOfDll + i);
	}
	return -1;
}

uintptr_t FindPattern(HMODULE hModule, const UCHAR* pattern, const CHAR* mask)
{
	MODULEINFO mInfo = GetModuleInfo(hModule);
	uintptr_t lpBaseOfDll = (uintptr_t)(mInfo.lpBaseOfDll);
	uintptr_t SizeOfImage = (uintptr_t)(mInfo.SizeOfImage);
	return FindPattern(lpBaseOfDll, SizeOfImage, pattern, mask);
}

#pragma region Structure
//Generated by DexClasses [Created by Superlevel2021 & Knochove] 
DWORD BaseAddress = 0x0050A280;

//Offsets
#define Health 0x258


int LocalHacks(DWORD offset, INT values, bool getval)
{	//MIDDLE (*(DWORD*)(
	//END *(DWORD*)(
	DWORD Base = *(DWORD*)(BaseAddress);
	if (!Base)return NULL; DWORD Offset2 = *(DWORD*)(*(DWORD*)(BaseAddress)+0x8);
	if (!Offset2)return NULL; DWORD Offset3 = *(DWORD*)(*(DWORD*)(*(DWORD*)(BaseAddress)+0x8) + 0x9C);
	if (!Offset3)return NULL; DWORD Offset4 = *(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(BaseAddress)+0x8) + 0x9C) + 0xA4);
	if (!Offset4)return NULL; DWORD Offset5 = *(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(BaseAddress)+0x8) + 0x9C) + 0xA4) + 0x34);
	if (!Offset5)return NULL;
	if (getval)
	{
		try
		{
			DWORD valuesreturn = *(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(BaseAddress)+0x8) + 0x9C) + 0xA4) + 0x34) + offset);
			return valuesreturn;
		}
		catch (...) {}
	}
	else
		try
	{
		*(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(*(DWORD*)(BaseAddress)+0x8) + 0x9C) + 0xA4) + 0x34) + offset) = values;
	}
	catch (...) {}
}

#pragma endregion
